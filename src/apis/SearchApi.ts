/* tslint:disable */
/* eslint-disable */
/**
 * Apicurio Registry API [v2]
 * Apicurio Registry is a datastore for standard event schemas and API designs. Apicurio Registry enables developers to manage and share the structure of their data using a REST interface. For example, client applications can dynamically push or pull the latest updates to or from the registry without needing to redeploy. Apicurio Registry also enables developers to create rules that govern how registry content can evolve over time. For example, this includes rules for content validation and version compatibility.  The Apicurio Registry REST API enables client applications to manage the artifacts in the registry. This API provides create, read, update, and delete operations for schema and API artifacts, rules, versions, and metadata.   The supported artifact types include: - Apache Avro schema - AsyncAPI specification - Google protocol buffers - GraphQL schema - JSON Schema - Kafka Connect schema - OpenAPI specification - Web Services Description Language - XML Schema Definition   **Important**: The Apicurio Registry REST API is available from `https://MY-REGISTRY-URL/apis/registry/v2` by default. Therefore you must prefix all API operation paths with `../apis/registry/v2` in this case. For example: `../apis/registry/v2/ids/globalIds/{globalId}`. 
 *
 * The version of the OpenAPI document: 2.2.0.Final
 * Contact: apicurio@lists.jboss.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ArtifactSearchResults,
    ArtifactSearchResultsFromJSON,
    ArtifactSearchResultsToJSON,
    ArtifactType,
    ArtifactTypeFromJSON,
    ArtifactTypeToJSON,
    SortBy,
    SortByFromJSON,
    SortByToJSON,
    SortOrder,
    SortOrderFromJSON,
    SortOrderToJSON,
} from '../models';

export interface SearchArtifactsRequest {
    name?: string;
    offset?: number;
    limit?: number;
    order?: SortOrder;
    orderby?: SortBy;
    labels?: Array<string>;
    properties?: Array<string>;
    description?: string;
    group?: string;
}

export interface SearchArtifactsByContentRequest {
    body: Blob;
    canonical?: boolean;
    artifactType?: ArtifactType;
    offset?: number;
    limit?: number;
    order?: SearchArtifactsByContentOrderEnum;
    orderby?: SearchArtifactsByContentOrderbyEnum;
}

/**
 * 
 */
export class SearchApi extends runtime.BaseAPI {

    /**
     * Returns a paginated list of all artifacts that match the provided filter criteria. 
     * Search for artifacts
     */
    async searchArtifactsRaw(requestParameters: SearchArtifactsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ArtifactSearchResults>> {
        const queryParameters: any = {};

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.order !== undefined) {
            queryParameters['order'] = requestParameters.order;
        }

        if (requestParameters.orderby !== undefined) {
            queryParameters['orderby'] = requestParameters.orderby;
        }

        if (requestParameters.labels) {
            queryParameters['labels'] = requestParameters.labels;
        }

        if (requestParameters.properties) {
            queryParameters['properties'] = requestParameters.properties;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        if (requestParameters.group !== undefined) {
            queryParameters['group'] = requestParameters.group;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/search/artifacts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ArtifactSearchResultsFromJSON(jsonValue));
    }

    /**
     * Returns a paginated list of all artifacts that match the provided filter criteria. 
     * Search for artifacts
     */
    async searchArtifacts(requestParameters: SearchArtifactsRequest = {}, initOverrides?: RequestInit): Promise<ArtifactSearchResults> {
        const response = await this.searchArtifactsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a paginated list of all artifacts with at least one version that matches the posted content. 
     * Search for artifacts by content
     */
    async searchArtifactsByContentRaw(requestParameters: SearchArtifactsByContentRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ArtifactSearchResults>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling searchArtifactsByContent.');
        }

        const queryParameters: any = {};

        if (requestParameters.canonical !== undefined) {
            queryParameters['canonical'] = requestParameters.canonical;
        }

        if (requestParameters.artifactType !== undefined) {
            queryParameters['artifactType'] = requestParameters.artifactType;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.order !== undefined) {
            queryParameters['order'] = requestParameters.order;
        }

        if (requestParameters.orderby !== undefined) {
            queryParameters['orderby'] = requestParameters.orderby;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/search/artifacts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ArtifactSearchResultsFromJSON(jsonValue));
    }

    /**
     * Returns a paginated list of all artifacts with at least one version that matches the posted content. 
     * Search for artifacts by content
     */
    async searchArtifactsByContent(requestParameters: SearchArtifactsByContentRequest, initOverrides?: RequestInit): Promise<ArtifactSearchResults> {
        const response = await this.searchArtifactsByContentRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum SearchArtifactsByContentOrderEnum {
    Asc = 'asc',
    Desc = 'desc'
}
/**
    * @export
    * @enum {string}
    */
export enum SearchArtifactsByContentOrderbyEnum {
    Name = 'name',
    CreatedOn = 'createdOn'
}
